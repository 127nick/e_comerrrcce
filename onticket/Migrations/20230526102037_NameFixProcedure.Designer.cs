// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using onticket.data;

#nullable disable

namespace onticket.Migrations
{
    [DbContext(typeof(Appdbcontext))]
    [Migration("20230526102037_NameFixProcedure")]
    partial class NameFixProcedure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("onticket.Models.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("cinemas");
                });

            modelBuilder.Entity("onticket.Models.Produser", b =>
                {
                    b.Property<int>("IdproduserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdproduserId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fullname")
                        .HasColumnType("int");

                    b.Property<string>("profilePiture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdproduserId");

                    b.ToTable("produserss");
                });

            modelBuilder.Entity("onticket.Models.actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fullname")
                        .HasColumnType("int");

                    b.Property<string>("profilePiture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("actors");
                });

            modelBuilder.Entity("onticket.Models.actor_movie", b =>
                {
                    b.Property<int>("Actorid")
                        .HasColumnType("int");

                    b.Property<int>("movieid")
                        .HasColumnType("int");

                    b.HasKey("Actorid", "movieid");

                    b.HasIndex("movieid");

                    b.ToTable("actor_movies");
                });

            modelBuilder.Entity("onticket.enum.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("enddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("imageurl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("moviecat")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("produserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("startdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.HasIndex("produserId");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("onticket.Models.actor_movie", b =>
                {
                    b.HasOne("onticket.Models.actor", "actor")
                        .WithMany("actors_movie")
                        .HasForeignKey("Actorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onticket.enum.Movie", "movie")
                        .WithMany("actor_Movies")
                        .HasForeignKey("movieid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("actor");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("onticket.enum.Movie", b =>
                {
                    b.HasOne("onticket.Models.Cinema", "Cinema")
                        .WithMany("Movies")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("onticket.Models.Produser", "Produser")
                        .WithMany()
                        .HasForeignKey("produserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("Produser");
                });

            modelBuilder.Entity("onticket.Models.Cinema", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("onticket.Models.actor", b =>
                {
                    b.Navigation("actors_movie");
                });

            modelBuilder.Entity("onticket.enum.Movie", b =>
                {
                    b.Navigation("actor_Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
